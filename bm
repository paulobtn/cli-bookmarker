#!/bin/sh

# Defaults settings
# BM_LAUNCHER=${BROWSER} #browser that launches the URLs
BM_LAUNCHER=xdg-open #default application to launch URLs
BM_EDITOR=${EDITOR} # change editor used with bm -e
BM_DB="$HOME/bookmarks" # where the bookmarks are stored
CONFIG_FILE="$HOME/.config/cli-bookmarker/bmrc"

#Helper Functions

# join string
function join_by { local d=${1-} f=${2-}; if shift 2; then printf %s "$f" "${@/#/$d}"; fi; }

# trim string
function trim(){ 
    sed -e 's/^[[:space:]]*//'
}

# beautiful print of bookmarks file
function bm_print(){ 
    local f=$1
    # cat -n $f | awk '{ $3 = "\t" $3; print}' | column -t -s $'\t' 
    cat -n $f | column -t -s $'\t' 
}

# output configuration file
function output_config(){
cat <<EOF
###################################################################
# General Configuration
#------------------------------------------------------------------
# 
# Must be written bellow [general]
#
# bmfile <file> is the default bookmark file
# editor <editor> is the default text editor
# browser <browser> defines the default browser
#
# example:
#
# [general]
# bmfile $HOME/bookmarks
# editor vim
# browser firefox
####################################################################

#####################################################################
# URL Configuration
#--------------------------------------------------------------------
#
# Must be written bellow [urls]
#
# You can assign specific URLs to specific software
# the url selected with bm -o will be matched with the urls bellow
# and the software from the last match will be chosen 
# [url pattern] <software>
#
# example:
# 
# [urls]
#
# youtube.com/watch mpv
# gemini:// amfora
# github.com firefox
######################################################################
EOF
}

function output_help(){
cat <<EOF

bookmark-cli: Save and launch bookmarks

Usage:

    bm [url] [description]? [tag...]?
    bm [option]
    bm [option] [tag]
    bm [option] [id...]
    bm [option] [url]

Options:

    -l, list all the bookmarks
    -r, remove bookmark with the specified id, or search with fzf if not
    -o, open bookmark if id is specified, open URL if a url is specified or, search with fzf if no argument was given
    -e, edit with default text editor
    -t, fuzzy search of entries with an especific tag

    --create-config, create a configuration file: $HOME/.config/cli-bookmarker/bmrc

Examples

    Create bookmark. Description and tags are optional
    bm https://wiki.archlinux.org 
    bm https://wiki.archlinux.org "arch wiki"
    bm https://wiki.archlinux.org "arch wiki" tag1 tag2

    list bookmarks, it's possible to filter by tags
    bm -l
    bm -l classical-music

    remove entries. If no argument is given a fuzzy search prompt will open
    multiple entries can be selected with tab
    bm -r 
    bm -r 2 3

    launch any URL or bookmark entry.
    If no argument is provided, a fuzzy search prompt will open.
    bm -o www.linux.org
    bm -o 2
    bm -o

    search bookmark with specific tag
    bm -t linux

    edit bookmark file
    bm -e

More help at <https://github.com/paulonetodev/cli-bookmarker>
EOF
}

# should receive the URL that will be launched and the URLS array from the configuration file
# it returns the launcher associated with the last URL that matches with the URLS array
function get_launcher(){
    # URL we want to launch
    local LAUNCH_URL=$1
    # URLs associated with diferent launchers in the config file
    local URLS_ARR_N=$2[@]
    local URLS_ARR=("${!URLS_ARR_N}")
    #default launcher if no match occurs
    local LAUNCHER=$BM_LAUNCHER

    #check if there's a match in the URLS array
    for i in "${URLS_ARR[@]}"
    do
        local CURRENT_URL=`echo $i | awk '{print $1}'`
        local CURRENT_APP=`echo $i | awk '{print $2}'`
        if grep -q "$CURRENT_URL" <<< "$LAUNCH_URL"; then
            LAUNCHER=$CURRENT_APP
        fi
    done
    
    echo $LAUNCHER
}

# Parsing the configuration file
# These arrays represent the lines of each section of bmrc
GENERAL=()
URLS=()

if test -f "$CONFIG_FILE"; then 
    #Config file exists: Parse it and assign new defaults
    CURR="none";
    while IFS= read -r line
    do
        line=`echo $line | trim | envsubst`
        if [ "$line" = "[general]" ]; then
            CURR="general"
        elif [ "$line" = "[urls]" ]; then
            CURR="urls"
        else
            # echo $CURR
            case $CURR in
                "general")
                    if [ ! -z "$line" ]; then
                        # [[ ! $line = \#* ]] && GENERAL+=("$line")
                        case $line in 
                            "#"*) 
                                # line is commented
                            ;; 
                            *) GENERAL+=("$line") 
                            ;;
                        esac
                    fi
                ;;
                "urls")
                    if [ ! -z "$line" ]; then
                        case $line in 
                            "#"*) 
                                # line is commented
                            ;; 
                            *) 
                            URLS+=("$line")
                            ;;
                        esac
                        
                    fi
                ;;
                *)
                ;;
            esac
        fi       
    done < $CONFIG_FILE

    # echo ${GENERAL[@]}
    # echo ${URLS[@]}

    # assign new config defaults
    for i in "${GENERAL[@]}"
    do
        gc=`echo $i | awk '{print $1}'`
        gs=`echo $i | awk '{print $2}'`
        case $gc in
            "bmfile")
                BM_DB=$gs
            ;;
            "editor")
                BM_EDITOR=$gs
            ;;
            "browser")
                BM_LAUNCHER=$gs
            ;;
            *)
                echo "invalid configuration"
            ;;
        esac
    done;
else
    echo "Configuration file not found. You can create one with bm --create-config"
fi

#Main logic
case $1 in
    "-l") 
        #list bookmarks
        if [ -z "$2" ]; then 
            # no tag was given: list all
            # cat -n ${BM_DB} | awk '{ $3 = "\t" $3; print}' | column -t -s $'\t'
            bm_print ${BM_DB}
        else
            # tag was given: list only entries that match
             bm_print ${BM_DB} | grep "\[*$2"
        fi   
        ;;
    "-r") 
        ARR=()
        #remove bookmark if id is provided
        if [ ! -z "$2" ]; then        
            # add lines that will be deleted to an array           
            while (( "$#-1" )); do
                ARR+=($2d)
                shift 
            done
        else
            # user can select multiple entries. This returns the ids list that will be used by sed, example: [3d 5d 7d]
            # ARR=(`cat -n ./bookmarks | fzf -m | awk '{print $1"d"}' | xargs echo`)
            ARR=(`bm_print ${BM_DB} | fzf -m | awk '{print $1"d"}' | xargs echo`)
        fi
        #delete the lines
        if [ ${#ARR[@]} -ne "0" ]; then
            sed -i.bak `join_by ";" $(printf '%s\n' "${ARR[*]}")` ${BM_DB} 
        fi       
        ;;
    "-o"|"") 
        # bm -o and bm open search prompt
        # bm -o <url> launch a website
        # bm -o <id> launch website from bookmark
        #open bookmark or URL
        if [ -z "$2" ]; then 
            # id not provided: open search prompt
            LINE=`bm_print ${BM_DB} | fzf`             
            if [ ! -z "$LINE" ]; then 
                URL=`echo $LINE | awk '{print $2}'`
            fi
        else
            #argument was provided
            re='^[0-9]+$'
            if ! [[ $2 =~ $re ]] ; then
                # not a number, assume it's a url
                URL=$2
            else 
                #it's a number: just take the URL from the line number provided
                URL=`sed -n $2p ${BM_DB} | awk '{print $1}'`
            fi

            
        fi
        [ ! -z "$URL" ] && $(get_launcher $URL "URLS") $URL;
        ;;
    "-t")
        # open with tag search
        if [ ! -z "$2" ]; then 
            LINE=`bm_print ${BM_DB} | grep "\[*$2" | fzf`
            if [ ! -z "$LINE" ]; then 
                # open the selected url
                URL=`echo $LINE | awk '{print $2}'`
                [ ! -z "$URL" ] && $(get_launcher $URL "URLS") $URL > /dev/null;
            fi
        else
            echo "must have a tag as input" >&2; exit 1
        fi
        ;;
    "-e")
        #edit with text editor
        ${BM_EDITOR} ${BM_DB}
        ;;
    "-h")
        output_help
        ;;
    "--create-config")
        DIR="$HOME/.config/cli-bookmarker/"
        [ ! -d "$DIR" ] && mkdir -p "$DIR"
        output_config > "$DIR/bmrc"
        echo "Configuration file created: $HOME/.config/cli-bookmarker/bmrc"
        ;;    
    *)
        if [[ ${1:0:1} == "-" ]]; then
            echo "invalid command. Use bm -h for help" >&2; exit 1
        else
            #bm [url] [description]? [tags]? should add a bookmark
            SITE=$1
            TAGS=()
            TAGSSTR=""
            DESCR=""

            # check if there's description
            if [ ! -z "$2" ]; then
                DESCR="$2"
                #check if there's tags
                if [ ! -z "$3" ]; then 
                    while (( "$#" )); do
                        TAGS+=($3)
                        shift 
                    done
                    TAGSSTR=`printf '[%s] ' "${TAGS[*]}"`
                fi   

            fi
            echo -e "$SITE\t$DESCR\t$TAGSSTR" >> ${BM_DB}   
        fi
        ;;
esac