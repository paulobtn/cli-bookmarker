#!/bin/sh
# Defaults settings
CONFIG_DIR="$HOME/.config/cli-bookmarker/"
BM_LAUNCHER=xdg-open #default application to launch URLs
BM_EDITOR=${EDITOR} # change editor used with bm -e
BM_DB="$HOME/bookmarks" # where the bookmarks are stored
CONFIG_FILE="$HOME/.config/cli-bookmarker/bmrc"

#Helper Functions

# trim string
trim() { 
    sed -e 's/^[[:space:]]*//'
}
# beautiful print of bookmarks file
bm_display() { 
    bm_display_f="$1"
    cat -n $bm_display_f 
}

# output configuration file
output_config() {
cat <<EOF
###################################################################
# General Configuration
#------------------------------------------------------------------
# 
# Must be written bellow [general]
#
# bmfile <file> is the default bookmark file
# editor <editor> is the default text editor
# browser <browser> defines the default browser
#
# example:
#
# [general]
# bmfile $HOME/bookmarks
# editor vim
# browser firefox
####################################################################

#####################################################################
# URL Configuration
#--------------------------------------------------------------------
#
# Must be written bellow [urls]
#
# You can assign specific URLs to specific software
# the url selected with bm -o will be matched with the urls bellow
# and the software from the last match will be chosen 
# [url pattern] <software>
#
# example:
# 
# [urls]
#
# youtube.com/watch mpv
# gemini:// amfora
# github.com firefox
######################################################################
EOF
}

output_version() {
cat <<EOF
cli-bookmarker 2.1
License GPLv3: GNU GPL version 3.
This is free software: you are free to change and redistribute it.

Written by Paulo Neto
<https://github.com/paulobtn/cli-bookmarker/>
EOF
}

output_help() {
cat <<EOF

cli-bookmarker: Save and launch bookmarks

Usage:

    bm [url] [description]? [tag...]?
    bm [option]
    bm [option] [tag]
    bm [option] [id...]
    bm [option] [url]

Options:

    -l, list all the bookmarks
    -r, remove bookmark with the specified id, or search with fzf if not
    -o, open bookmark if id is specified, open URL if a url is specified or, search with fzf if no argument was given
    -e, edit with default text editor
    -t, if tag is provided, fuzzy search of entries with an especific tag. If tag is not provided, list all tags
    -h, --help show help
    -v, --version show version
        --create-config, create a configuration file: $HOME/.config/cli-bookmarker/bmrc

Examples

    Create bookmark. Description and tags are optional
    bm https://wiki.archlinux.org 
    bm https://wiki.archlinux.org "arch wiki"
    bm https://wiki.archlinux.org "arch wiki" tag1 tag2

    list bookmarks, it's possible to filter by tags
    bm -l
    bm -l classical-music

    remove entries. If no argument is given a fuzzy search prompt will open
    multiple entries can be selected with tab
    bm -r 
    bm -r 2 3

    launch any URL or bookmark entry.
    If no argument is provided, a fuzzy search prompt will open.
    bm -o www.linux.org
    bm -o 2
    bm -o

    search bookmark with specific tag
    bm -t linux

    List all tags
    bm -t

    edit bookmark file
    bm -e

More help at <https://github.com/paulobtn/cli-bookmarker>
EOF
}

# should receive the URL that will be launched and the URLS array from the configuration file
# it returns the launcher associated with the last URL that matches with the URLS array
# the url array is a string with the lines bellow the [url] tag in the configuration file
# "$line1|$line2..."
get_launcher() {
    #URL we want to launch
    GLA_LAUNCH_URL="$1"
    #URLS associated with launchers in the config file
    GLA_URLS_ARR="$2"
    #How many URLs in the config file
    GLA_URLS_ARR_S=0
    [ ! -z "$GLA_URLS_ARR" ] && GLA_URLS_ARR_S=$((`echo "$GLA_URLS_ARR" | tr -cd '|' | wc -c`+1))
    #default launcher if no match occurs
    GLA_LAUNCHER=$BM_LAUNCHER

    # echo $GLA_URLS_ARR | awk -F$'|' '{print $3}'
    #check if there's any match in the URLS array
    for i in $(seq 1 $GLA_URLS_ARR_S); do
        line=`echo $GLA_URLS_ARR | awk -F'|' -v var="$i" '{print $var}'`
        GLA_CURR_URL=`echo "$line" | awk '{print $1}'` 
        GLA_CURR_APP=`echo "$line" | awk '{print $2}'` 
        if [ -n "`echo $GLA_LAUNCH_URL | grep "$GLA_CURR_URL"`" ]; then
            GLA_LAUNCHER=$GLA_CURR_APP
        fi
    done

    echo $GLA_LAUNCHER
}

# Parsing the configuration file
# These arrays represent the lines of each section of bmrc
URLS_CONFIG=""

if test -f "$CONFIG_FILE"; then 
  #Config file exists: Parse it and assign new defaults
  CURR="none";
  while IFS= read -r line
    do
      line=`echo $line | trim | envsubst`
      if [ "$line" = "[general]" ]; then CURR="general"
      elif [ "$line" = "[urls]" ]; then CURR="urls"
      else
        case $CURR in
            "urls") URLS_CONFIG="$URLS_CONFIG$line|" ;;
            "general") 
                #assign new default configurations
                gc=`echo $line | awk '{print $1}'`
                gs=`echo $line | awk '{print $2}'`
                case $gc in
                    "bmfile") BM_DB=$gs ;;
                    "editor") BM_EDITOR=$gs ;;
                    "browser") BM_LAUNCHER=$gs ;;
                    *) echo "invalid configuration file" ;;
                esac
            ;;           
            *) ;;
        esac
      fi
   done <<EOF
$(sed 's/#.*$//;/^$/d' $CONFIG_FILE)
EOF
    URLS_CONFIG=`echo $URLS_CONFIG | sed 's/.$//' | trim`
else
    echo "Configuration file not found. You can create one with bm --create-config"
fi

#Main logic
case $1 in
    "-l") 

        # bm -l list the bookmarks

        if [ -z "$2" ]; then 
            # no tag was given: list all
            bm_display ${BM_DB} | column -t -s "$(printf '\t')"
        else
            # tag was given: list only entries that match
             bm_display ${BM_DB} | grep "\[.*$2.*\]"
        fi   
        ;;
    "-r") 
        RMSTR=""
        #remove bookmark if id is provided
        if [ ! -z "$2" ]; then        
            # add lines that will be deleted to a string           
            while [ "$#" -gt "0" ]; do
                [ -n "$2" ] && RMSTR="$RMSTR $2d"
                shift
            done
        else
            # user can select multiple entries. This returns the ids list that will be used by sed, example: [3d 5d 7d]
            RMSTR=`bm_display ${BM_DB} | fzf -m --delimiter="$(printf '\t')" --preview-window right:45%:wrap --preview='printf "Title: %b\n\nTags: %b\n\nUrl: %b\n\n" {2} {3} {4}' | awk '{print $1"d"}'`
        fi
        #delete the lines
        if [ ! -z "$RMSTR" ]; then
            sed -i.bak "`echo $RMSTR | trim | sed 's/ /;/g'`" ${BM_DB} 
        fi
        ;;
    "-o"|"") 

        # bm -o and bm open search prompt
        # bm -o <url> launch a website
        # bm -o <id> launch website from bookmark

        #open bookmark or URL
        if [ -z "$2" ]; then 
            # id not provided: open search prompt
            LINE=`bm_display ${BM_DB} | fzf --delimiter="$(printf '\t')" --preview-window right:45%:wrap --preview='printf "Title: %b\n\nTags: %b\n\nUrl: %b\n\n" {2} {3} {4}'`             
            if [ ! -z "$LINE" ]; then 
                URL=`echo $LINE | awk '{print $NF}'`
            fi
        else
            #argument was provided
            if [ -z "`echo "$2" | grep '^[0-9]\+$'`" ]; then
                # not a number, assume it's a url
                URL="$2"
            else 
                #it's a number: just take the URL from the line number provided
                URL=`sed -n $2p ${BM_DB} | awk '{print $NF}'`
            fi
        fi
        [ ! -z "$URL" ] && $(get_launcher "$URL" "$URLS_CONFIG") $URL;
        ;;
    "-t")
        # open with tag search
        if [ ! -z "$2" ]; then 
            # tag is provided, open search
            LINE=`bm_display ${BM_DB} | grep "\[.*$2.*]" | fzf --delimiter="$(printf '\t')" --preview-window right:45%:wrap --preview='printf "Title: %b\n\nTags: %b\n\nUrl: %b\n\n" {2} {3} {4}'`
            if [ ! -z "$LINE" ]; then 
                # open the selected url
                URL=`echo $LINE | awk '{print $NF}'`
                [ ! -z "$URL" ] && $(get_launcher "$URL" "$URLS_CONFIG") $URL;
            fi
        else
            # tag not provided, list all tags
            all_tags=`grep -oP '\[\K[^]]*' ${BM_DB}`
            echo $all_tags | tr ' ' '\n' | sort -u
        fi
        ;;
    "-e")
        #edit with text editor
        ${BM_EDITOR} ${BM_DB}
        ;;
    "-h"|"--help") output_help ;;
    "-v"|"--version") output_version ;;
    "--create-config")
        [ ! -d "$CONFIG_DIR" ] && mkdir -p "$CONFIG_DIR"
        output_config > "$CONFIG_DIR/bmrc"
        echo "Configuration file created: $HOME/.config/cli-bookmarker/bmrc"
        ;;    
    *)
        if [ -n "`echo "$1" | grep "^-"`" ]; then
            echo "invalid command. Use bm -h for help" >&2; exit 1
        else
            #bm [url] [description]? [tags]? should add a bookmark
            SITE=$1
            TAGS=""
            DESCR=""
            # check if there's description
            if [ ! -z "$2" ]; then
                DESCR="$2"
                #check if there's tags
                if [ ! -z "$3" ]; then 
                    while [ "$#" -gt "0" ]; do
                        TAGS="$TAGS $3"
                        shift 
                    done
                    TAGS="[ `echo $TAGS | trim` ]"
                fi   
            fi
            [ -z "$DESCR" ] && DESCR="------"
            [ -z "$TAGS" ] && TAGS="------"
            printf '%s\t%s\t%s\n' "$DESCR" "$TAGS" "$SITE" >> ${BM_DB}
        fi
        ;;
esac
